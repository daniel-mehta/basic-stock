# -*- coding: utf-8 -*-
"""stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCUweZOBnWKnFp6I2ygyN40nhaRSDg2h

Uses the dual moving average crossover to determine when to buy/sell stock
"""

#imports
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt 
plt.style.use('fivethirtyeight')

#Loading Data 
from google.colab import files
print("Import .csv File")
uploaded = files.upload()

#storing data
val = input("Enter File Name: (Dont Include .csv) ")
handle = val + '.csv'
stock = pd.read_csv(handle)
#show data
stock

#Getting Dates of Values
date1 = stock['Date'][0]
x = len(stock)-1
print(x)
date2 = stock['Date'][x]

#Visualize Data
plt.figure(figsize=(12.5, 4.5))
plt.plot(stock['Adj Close'], label = val)
plt.title(f"{val} Adj Close Price History")
plt.xlabel("{} - {}".format(date1, date2))
plt.ylabel('Adj. Close Price USD ($)')
plt.legend (loc = 'upper left')
plt.show()

#Create Simple moving Average with 30 day window
SMA30 = pd.DataFrame()
SMA30['Adj Close Price'] = stock['Adj Close'].rolling(window=30).mean()
#SMA30

#create a simple moving 100 day average
SMA100= pd.DataFrame()
SMA100['Adj Close Price'] = stock['Adj Close'].rolling(window=100).mean()
#SMA100

#Visualize The Data
plt.figure(figsize=(12.5, 4.5))
plt.plot(stock['Adj Close'], label = val)
plt.plot(SMA30['Adj Close Price'], label = 'SMA30')
plt.plot(SMA100['Adj Close Price'], label = 'SMA100')
plt.title(f"{val} Adj Close Price History")
plt.xlabel("{} - {}".format(date1, date2))
plt.ylabel('Adj. Close Price USD ($)')
plt.legend (loc = 'upper left')
plt.show()

#Create a new data frame to store all the data
data = pd.DataFrame()
data[val]=stock['Adj Close']
data['SMA30'] = SMA30['Adj Close Price']
data['SMA100'] = SMA100['Adj Close Price']
#data

#Create a function to signal when to buy & sell the stock
def buy_sell(data):
  sigPriceBuy = []
  sigPriceSell = []
  flag = -1

  for i in range(len(data)):
    if data['SMA30'][i] > data['SMA100'][i]:
      if flag!=1:
        sigPriceBuy.append(data[val][i])
        sigPriceSell.append(np.nan)
        flag = 1
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    elif data['SMA30'][i]<data['SMA100'][i]:
      if flag != 0:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(data[val][i])
        flag = 0
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    else:
      sigPriceBuy.append(np.nan)
      sigPriceSell.append(np.nan)
  return (sigPriceBuy, sigPriceSell)

#Store the buy & sell data into a var
buy_sell = buy_sell(data)
data['Buy_Signal_Price'] = buy_sell[0]
data['Sell_Signal_Price'] = buy_sell[1]

#Show The Data
#data

#Visualize the data and strategy to buy/sell
plt.figure(figsize=(12.6, 4.6))
plt.plot(data[val], label = val, alpha = 0.35)
plt.plot(data['SMA30'], label = ' SMA30', alpha = 0.35)
plt.plot(data['SMA100'], label = 'SMA100', alpha = 0.35)
plt.scatter(data.index, data['Buy_Signal_Price'], label = 'Buy', marker='^', color = 'green')
plt.scatter(data.index, data['Sell_Signal_Price'], label = 'Sell', marker='v', color = 'red')
plt.title(f"{val} Adj Close Price History")
plt.xlabel("{} - {}".format(date1, date2))
plt.ylabel('Adj. Close Price USD ($)')
plt.legend (loc = 'upper left')
plt.show()